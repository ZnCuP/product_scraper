# .github/workflows/scrape_products.yml

name: Scrape Products

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间午夜运行
  workflow_dispatch: # 允许手动触发工作流

permissions:
  contents: write # 授予工作流写入仓库内容的权限，以便提交更新的数据

jobs:
  scrape:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 运行器上执行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 检出仓库代码

      - name: Set up Python
        uses: actions/setup-python@v5 # 设置 Python 环境
        with:
          python-version: '3.x' # 使用最新的 Python 3.x 版本

      - name: Install dependencies
        run: pip install -r requirements.txt # 安装 requirements.txt 中列出的依赖

      - name: Install Playwright browsers
        # 这个步骤会下载并安装 Playwright 所需的浏览器二进制文件及其系统依赖
        run: python -m playwright install --with-deps

      - name: Create data directory
        # 直接在工作区根目录创建 data 文件夹，因为 main.py 就在根目录
        run: mkdir -p data

      - name: Run product scraper
        run: |
          # main.py 就在当前工作目录 (仓库根目录)，所以直接运行即可
          python main.py

      - name: Upload new product data as artifact
        uses: actions/upload-artifact@v4
        with:
          name: product-data-${{ github.run_id }} # 上传 artifact 的名称
          # 上传 data 目录下的文件，路径相对于工作区的根目录
          path: data/

      - name: Configure Git for committing
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for changes to commit
        id: git_check
        run: |
          # 将 data 目录下的所有文件添加到 Git 暂存区，路径相对于工作区的根目录
          git add data/
          # 检查暂存区是否有实际的变化。如果有变化，git diff --cached --exit-code 会返回非零退出码。
          if git diff --cached --exit-code; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push changes
        if: steps.git_check.outputs.has_changes == 'true' # 只有当有变化时才执行提交和推送
        run: |
          git commit -m "feat: Update product data and check for new items (Automated)" # 提交更改
          git push origin main # 推送到 main 分支 (请确保你的主分支名称正确，可能是 master)